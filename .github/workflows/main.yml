name: CI
on:
  workflow_dispatch:
  pull_request:
jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install modules
        run: yarn

      - name: Run TypeScript compiler
        run: tsc

      - name: Run ESLint
        run: yarn eslint .

  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    needs: install
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          build: yarn build:skip
          start: yarn start
          browser: chrome

      - name: Find and rename cypress fail screenshots
        id: list
        if: failure()
        run: |
          readarray -t imgs < <(find cypress/output/screenshots -type f -name "*.png")
          echo "${#imgs[@]} screenshots found"

          readarray -t axe_imgs < <(find cypress/output/screenshots -type f -name "*.png" | grep -P '.*(?<!failed\)).png$')
          echo "${#axe_imgs[@]} axe screenshots found"

          cypress_imgs=()
          rename_count=1

          for i in "${!imgs[@]}"; do
            is_duplicate_candidate=$(echo ${imgs[$i]} | grep -c '(failed)')
            echo "debug loop item: $i";
            echo "debug img: ${imgs[$i]}";

            if [[ $is_duplicate_candidate -gt 0 ]]; then
                test_name=$(echo ${imgs[$i]} | sed "s/\s(failed)//")
                echo "debug test_name: $test_name";
                if [[ " ${axe_imgs[@]} " =~ " ${test_name} " ]]; then
                      echo "removing duplicate: ${imgs[$i]}";
                      rm "${imgs[$i]}"
                      continue
                fi
            fi
            
            new_name="cypress/output/screenshots/run${{ github.run_id }}-screenshot$rename_count.png"
            echo "renaming file: ${imgs[$i]}  >>>  ./$new_name"; 
            mv "${imgs[$i]}" "./$new_name"; 
            cypress_imgs+=("$new_name")
            ((rename_count++))
          done

          echo "debug. loop finished, cypress_imgs: ${cypress_imgs[@]}"; 
          echo "cypress_imgs=${cypress_imgs[@]}" >> $GITHUB_OUTPUT

      - name: Upload screenshots to image host
        id: upload-screenshots
        if: failure()
        run: |
          cypress_imgs=("${{ steps.list.outputs.cypress_imgs }}")
          imgkit_responses=()
          for img in ${cypress_imgs[@]}; do
            echo "Uploading $img"
            response=$(curl -X POST "https://upload.imagekit.io/api/v1/files/upload" \
              -u ${{ secrets.IMAGEKIT_PRIVATE_KEY }}: \
              -F "file=@$img;type=image/png" \
              -F "fileName=$(basename $img)")
            imgkit_responses+=("$response")
          done
          echo "imgkit_responses=${imgkit_responses[@]}" >> $GITHUB_OUTPUT

      - name: Extract image data and create comment
        if: failure()
        uses: actions/github-script@v5
        with:
          script: |
            const itemSpliter = new RegExp(/(\}) (\{"fileId")/g);
            const imgkitResponses = `${{ steps.upload-screenshots.outputs.imgkit_responses }}`.replace(itemSpliter, '$1\n$2').split('\n');

            if (imgkitResponses.length === 0) {
              return;
            }

            const body = `## Cypress failures\n\n${imgkitResponses.map(response => {
              const { name, url } = JSON.parse(response);
              return `![${name}](${url})`;
            }).join('\n')}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
