name: CI
on:
  workflow_dispatch:
  pull_request:
jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install modules
        run: yarn

      - name: Run TypeScript compiler
        run: tsc

      - name: Run ESLint
        run: yarn eslint .

  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    needs: install
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "yarn"

      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          build: yarn build:skip
          start: yarn start
          browser: chrome

      - name: Find and rename cypress fail screenshots
        id: list
        if: failure()
        run: |
          while IFS= read -r line; do
              imgs+=("$line")
          done < <(find cypress/output/screenshots -type f -name '*.png')
          echo "${#imgs[@]} screenshots found"

          while IFS= read -r line; do
            axe_imgs+=("$line")
          done < <(find cypress/output/screenshots -type f -name '*.png' | grep -P '.*(?<!failed\)).png$')
          echo "${#axe_imgs[@]} axe screenshots found"

          rename_imgs=()
          cypress_imgs=()
          rename_count=1

          for i in "${!imgs[@]}"; do
            new_name="cypress/output/screenshots/run${{ github.run_id }}-screenshot${rename_count}.png"      
            echo "renaming file: ${imgs[$i]}  >>>  ./$new_name"; 
          done

          echo "debug. loop finished 1, cypress_imgs: ${cypress_imgs[@]}"; 

      # - name: Upload screenshots to image host
      #   id: upload-screenshots
      #   if: failure()
      #   run: |
      #     cypress_imgs=("${{ steps.list.outputs.cypress_imgs }}")
      #     imgkit_responses=()
      #     for img in ${cypress_imgs[@]}; do
      #       echo "Uploading $img"
      #       response=$(curl -X POST "https://upload.imagekit.io/api/v1/files/upload" \
      #         -u ${{ secrets.IMAGEKIT_PRIVATE_KEY }}: \
      #         -F "file=@$img;type=image/png" \
      #         -F "fileName=$(basename $img)")
      #       imgkit_responses+=("$response")
      #     done
      #     echo "imgkit_responses=${imgkit_responses[@]}" >> $GITHUB_OUTPUT

      # - name: Extract image data and create comment
      #   if: failure()
      #   uses: actions/github-script@v5
      #   with:
      #     script: |
      #       const itemSpliter = new RegExp(/(\}) (\{"fileId")/g);
      #       const imgkitResponses = `${{ steps.upload-screenshots.outputs.imgkit_responses }}`.replace(itemSpliter, '$1\n$2').split('\n');

      #       let imgLinks;

      #       if (imgkitResponses && imgkitResponses.length > 0) {
      #         const imgLinks = imgkitResponses.map(response => {
      #           if(!response) return;
      #           const { name, url } = JSON.parse(response);
      #           return `![${name}](${url})`;
      #         }).join('\n');
      #       }

      #       if (imgLinks) {
      #         const body = `## Cypress failures\n\n${imgLinks}`;

      #         github.rest.issues.createComment({
      #           issue_number: context.issue.number,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: body
      #         });
      #       }
